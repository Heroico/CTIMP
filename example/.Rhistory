gg0 <- gg0 + coord_flip()
gg0 <- gg0 + scale_y_continuous(expand=c(0,0), limits=c(0,0.029))
gg0 <- gg0 + geom_hline(yintercept=0, colour='darkgrey', size=0.7)
gg0 <- gg0 + scale_color_viridis(option="inferno", discrete=TRUE, begin=0.3, end=0.9)
gg0 <- gg0 + labs(x=NULL, y=NULL, title=expression("Average gain of R"^2*" by UTMOST"))
gg0 <- gg0 + theme(panel.grid.major.y=element_blank())
gg0 <- gg0 + theme(panel.grid.minor=element_blank())
gg0 <- gg0 + theme(legend.position = "None")
gg0
gg0 <- gg0 + theme(axis.text=element_text(size=12))
library(gtable)
g <- ggplotGrob(gg0)
s <- gtable_filter(g, 'axis-l|ylab', trim=F)  # use trim depending on need
grid.newpage()
grid.draw(s)
pdf("/Users/huyiming/Desktop/move/MultiGExpr/plotting/accuracyIncrease/ylab1.pdf", height = 5, width = 5)
grid.draw(s)
dev.off()
gg0 <- gg0 + theme(axis.text=element_text(size=10))
gg0
library(gtable)
g <- ggplotGrob(gg0)
s <- gtable_filter(g, 'axis-l|ylab', trim=F)  # use trim depending on need
grid.newpage()
grid.draw(s)
pdf("/Users/huyiming/Desktop/move/MultiGExpr/plotting/accuracyIncrease/ylab1.pdf", height = 5, width = 5)
grid.draw(s)
dev.off()
options(stringsAsFactors = F)
lapply(c("ggplot2","gridExtra","scales","gplots","grid","viridis"), require, character.only = TRUE)
df0 = data.frame(c("GTEx liver","STARNET liver","GTEx 44 tissues","GTEx 44 + STARNET liver"), c(57, 58, 185, 203))
names(df) = c("Method", "Sig_Cnt")
df
df = data.frame(c("GTEx liver","STARNET liver","GTEx 44 tissues","GTEx 44 + STARNET liver"), c(57, 58, 185, 203))
names(df) = c("Method", "Sig_Cnt")
gg0 = ggplot(data=df, aes(x=Method, y=Sig_Cnt))
gg0 = gg0 + geom_bar(stat="identity")
gg0 = gg0 + theme_minimal()
gg0 = gg0 + labs(x=NULL, y=NULL)
gg0 = gg0 + theme(axis.text=element_text(size=10))
gg0 = gg0 + theme(axis.text.x = element_text(angle = 90, hjust = 1))
gg0
df$Method = factor(df$Method, levels=c("GTEx liver","STARNET liver","GTEx 44 tissues","GTEx 44 + STARNET liver"))
gg0 = ggplot(data=df, aes(x=Method, y=Sig_Cnt))
gg0 = gg0 + geom_bar(stat="identity")
gg0 = gg0 + theme_minimal()
gg0 = gg0 + labs(x=NULL, y=NULL)
gg0 = gg0 + theme(axis.text=element_text(size=10))
gg0 = gg0 + theme(axis.text.x = element_text(angle = 90, hjust = 1))
gg0
gg0 = ggplot(data=df, aes(x=Method, y=Sig_Cnt, fill=Method))
gg0 = gg0 + geom_bar(stat="identity")
gg0 = gg0 + theme_minimal()
gg0 = gg0 + labs(x=NULL, y=NULL)
gg0 = gg0 + theme(axis.text=element_blank())
gg0
gg0 = gg0 + theme(axis.text.x=element_blank())
gg0
gg0 = ggplot(data=df, aes(x=Method, y=Sig_Cnt, fill=Method))
gg0 = gg0 + geom_bar(stat="identity")
gg0 = gg0 + theme_minimal()
gg0 = gg0 + labs(x=NULL, y=NULL)
gg0 = gg0 + theme(axis.text.x=element_blank())
gg0
gg0 = gg0 + theme(legend.position = "bottom")
gg0
options(stringsAsFactors = F)
lapply(c("ggplot2","gridExtra","scales","gplots","grid","viridis"), require, character.only = TRUE)
df = data.frame(c("GTEx liver","STARNET liver","GTEx 44 tissues","GTEx 44 + STARNET liver"), c(57, 58, 185, 203))
names(df) = c("Analysis", "Sig_Cnt")
df$Method = factor(df$Method, levels=c("GTEx liver","STARNET liver","GTEx 44 tissues","GTEx 44 tissues + STARNET liver"))
gg0 = ggplot(data=df, aes(x=Analysis, y=Sig_Cnt, fill=Analysis))
gg0 = gg0 + geom_bar(stat="identity")
gg0 = gg0 + theme_minimal()
gg0 = gg0 + labs(x=NULL, y=NULL)
gg0 = gg0 + theme(axis.text.x=element_blank())
gg0 = gg0 + theme(legend.position = "bottom")
#gg0 = gg0 + theme(axis.text.x = element_text(angle = 90, hjust = 1))
gg0
df = data.frame(c("GTEx liver","STARNET liver","GTEx 44 tissues","GTEx 44 + STARNET liver"), c(57, 58, 185, 203))
names(df) = c("Analysis", "Sig_Cnt")
df$Analysis = factor(df$Analysis, levels=c("GTEx liver","STARNET liver","GTEx 44 tissues","GTEx 44 tissues + STARNET liver"))
gg0 = ggplot(data=df, aes(x=Analysis, y=Sig_Cnt, fill=Analysis))
gg0 = gg0 + geom_bar(stat="identity")
gg0 = gg0 + theme_minimal()
gg0 = gg0 + labs(x=NULL, y=NULL)
gg0 = gg0 + theme(axis.text.x=element_blank())
gg0 = gg0 + theme(legend.position = "bottom")
gg0
df = data.frame(c("GTEx liver","STARNET liver","GTEx 44 tissues","GTEx 44 tissues + STARNET liver"), c(57, 58, 185, 203))
names(df) = c("Analysis", "Sig_Cnt")
df$Analysis = factor(df$Analysis, levels=c("GTEx liver","STARNET liver","GTEx 44 tissues","GTEx 44 tissues + STARNET liver"))
gg0 = ggplot(data=df, aes(x=Analysis, y=Sig_Cnt, fill=Analysis))
gg0 = gg0 + geom_bar(stat="identity")
gg0 = gg0 + theme_minimal()
gg0 = gg0 + labs(x=NULL, y=NULL)
gg0 = gg0 + theme(axis.text.x=element_blank())
gg0 = gg0 + theme(legend.position = "bottom")
gg0
gg0 = gg0 + theme(legend.text=element_text(size=10))
gg0
gg0 = gg0 + theme(legend.text=element_text(size=12))
gg0
list.files("/Users/huyiming/Desktop/move/MultiGExpr/plotting/")
pdf("/Users/huyiming/Desktop/move/MultiGExpr/plotting/final_figures/5A.pdf",4,4)
gg0
dev.off()
gg0 = ggplot(data=df, aes(x=Analysis, y=Sig_Cnt, fill=Analysis))
gg0 = gg0 + geom_bar(stat="identity")
gg0 = gg0 + theme_minimal()
gg0 = gg0 + labs(x=NULL, y=NULL)
gg0 = gg0 + theme(axis.text.x=element_blank())
gg0 = gg0 + theme(legend.position = "right")
gg0 = gg0 + theme(legend.text=element_text(size=12))
gg0
pdf("/Users/huyiming/Desktop/move/MultiGExpr/plotting/final_figures/5A.pdf",4,4)
gg0
dev.off()
gg0
gg0 = ggplot(data=df, aes(x=Analysis, y=Sig_Cnt, fill=Analysis))
gg0 = gg0 + geom_bar(stat="identity")
gg0 = gg0 + theme_minimal()
gg0 = gg0 + labs(x=NULL, y=NULL)
gg0 = gg0 + theme(axis.text.x=element_blank())
gg0 = gg0 + theme(legend.position = "right")
gg0 = gg0 + theme(legend.text=element_text(size=12))
#gg0 = gg0 + theme(axis.text.x = element_text(angle = 90, hjust = 1))
gg0
library(ggplot2)
library(gridExtra)
library(scales)
library(gplots)
library(grid)
#library(ggrepel)
library(viridis)
options(stringsAsFactors = F)
gene_names = c("SYCE3","MB21D2","LNP1","FLVCR1","ZFAND2A","ZP3","SIPA1L3","POMGNT2","IFI27L1","GSTM1")
exp_files = paste0("/Users/huyiming/Desktop/move/MultiGExpr/plotting/cherryExample/", gene_names, "_exam.txt")
df_list = list()
for(i in 1:length(gene_names)){
tmp = read.table(exp_files[i], header = T)
tmp_df1 = cbind(tmp[,c(4,2)], "Multi-tissue joint prediction")
tmp_df2 = cbind(tmp[,c(4,3)], "Single-tissue elastic net")
names(tmp_df1) = names(tmp_df2) = c("adj", "pred", "Methods")
tmp_df3 = rbind(tmp_df1, tmp_df2)
tmp_df3$Methods = as.factor(tmp_df3$Methods)
tmp_df3$Methods = factor(tmp_df3$Methods, levels = c("Multi-tissue joint prediction","Single-tissue elastic net"))
df_list[[i]] = tmp_df3
}
ggplot_list1 = list()
for(g in 1:length(gene_names)){
ggplot_list1[[g]] = ggplot(df_list[[g]], aes(x=pred, y=adj, color = Methods)) +
theme_minimal() +
geom_point() + geom_smooth(method=lm) +
labs(x=NULL, y=NULL, title=gene_names[g]) +
theme(plot.title = element_text(size=14)) +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values=c(alpha("#E64A45",0.8), alpha("#3665AD",0.8))) +
scale_y_continuous(expand=c(0,0))+
theme(legend.position = "none", axis.title.y=element_blank(), axis.title.x=element_text(size=7), axis.text.y=element_text(size=7), axis.text.x=element_blank(), axis.ticks.x=element_blank())
}
for_legend = ggplot(df_list[[g]], aes(x=pred, y=adj, color = Methods)) +
theme_minimal() +
geom_point() + geom_smooth(method=lm) +
labs(x=NULL, y=NULL, title=gene_names[g]) +
theme(plot.title = element_text(size=7)) +
scale_color_manual(values=c(alpha("#E64A45",0.8), alpha("#3665AD",0.8))) +
theme(legend.position = "right", axis.title.y=element_blank(), axis.title.x=element_text(size=7), axis.text.y=element_text(size=7), axis.text.x=element_blank(), axis.ticks.x=element_blank())
library(ggplot2)
library(gtable)
library(grid)
library(gridExtra)
legend = gtable_filter(ggplotGrob(for_legend), "guide-box")
grid.arrange(arrangeGrob(ggplot_list1[[1]],ggplot_list1[[3]],
left = textGrob("Observed expression", rot = 90, vjust = 1),
nrow = 1, ncol=2, bottom=textGrob("Predicted expression")),
legend, widths=unit.c(unit(1, "npc") - legend$width, legend$width),nrow = 1)
ggplot_list1[[1]]
ggplot_list1[[1]] = ggplot_list1[[1]] + scale_y_continuous(limits=c(-0.5,2.1))
ggplot_list1[[1]] = ggplot_list1[[1]] + ylim(c(-0.5,2.1))
ggplot_list1 = list()
llm = matrix(0,3,2)
llm[1, ] = c(-0.5,2.1)
llm[3, ] = c(-0.75,1.1)
for(g in c(1,3)){
ggplot_list1[[g]] = ggplot(df_list[[g]], aes(x=pred, y=adj, color = Methods)) +
theme_minimal() +
geom_point() + geom_smooth(method=lm) +
labs(x=NULL, y=NULL, title=gene_names[g]) +
theme(plot.title = element_text(size=14)) +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_manual(values=c(alpha("#E64A45",0.8), alpha("#3665AD",0.8))) +
scale_y_continuous(expand=c(0,0), limits = llm[g,]) +
theme(legend.position = "none", axis.title.y=element_blank(), axis.title.x=element_text(size=7), axis.text.y=element_text(size=7), axis.text.x=element_blank(), axis.ticks.x=element_blank())
}
grid.arrange(arrangeGrob(ggplot_list1[[1]],ggplot_list1[[3]],
left = textGrob("Observed expression", rot = 90, vjust = 1),
nrow = 1, ncol=2, bottom=textGrob("Predicted expression")),
legend, widths=unit.c(unit(1, "npc") - legend$width, legend$width),nrow = 1)
pdf('/Users/huyiming/Desktop/move/MultiGExpr/plotting/cherryExample/two_genes_scatter1.pdf', height = 4, width = 8)
grid.arrange(arrangeGrob(ggplot_list1[[1]],ggplot_list1[[3]],
left = textGrob("Observed expression", rot = 90, vjust = 1),
nrow = 1, ncol=2, bottom=textGrob("Predicted expression")),
legend, widths=unit.c(unit(1, "npc") - legend$width, legend$width),nrow = 1)
dev.off()
library(ggplot2)
library(ggalt)
library(scales)
library(viridis)
library(gridExtra)
library(grid)
load("/Users/huyiming/Desktop/move/MultiGExpr/plotting/rsq_sig_size.RData")
tvss = aggregate(SampleSize ~ Tissue, rsq_plot2, mean)
tvss["p_value"] = test_p
tvss["if_sig"] = ifelse(test_p<0.05/44,'red','black')
tvss_sorted = tvss[order(tvss$SampleSize),]
tvss_sorted$Tissue = as.character(tvss_sorted$Tissue)
rsq_plot2$Tissue = as.factor(rsq_plot2$Tissue)
rsq_plot2$Tissue = factor(rsq_plot2$Tissue,levels = tvss_sorted$Tissue)
avg_gain = aggregate(Rsq_diff ~ Tissue, rsq_plot2, median)
prop_better = aggregate(Rsq_diff ~ Tissue, rsq_plot2, function(x){sum(x>=0)/length(x)})
sig_genes_df$Tissue = as.factor(sig_genes_df$Tissue)
sig_genes_df$Tissue = factor(sig_genes_df$Tissue,levels = tvss_sorted$Tissue)
sig_genes_df = sig_genes_df[order(sig_genes_df$SampleSize),]
cbind(sig_genes_df$Tissue,unique(avg_gain$Tissue))
tmp = rep('', 44)
tmp[sig_genes_df$SampleSize <= 150] = rep('<=150', sum(sig_genes_df$SampleSize <= 150))
tmp[sig_genes_df$SampleSize > 150&sig_genes_df$SampleSize<=250] = rep('>150 and <=250', sum(sig_genes_df$SampleSize  > 150&sig_genes_df$SampleSize<=250))
tmp[sig_genes_df$SampleSize > 250] = rep('> 250', sum(sig_genes_df$SampleSize > 250))
sig_genes_df$Tissue = factor(sig_genes_df$Tissue, levels=rev(levels(sig_genes_df$Tissue)))
tmp = rep('', 44)
tmp[sig_genes_df$SampleSize <= 150] = rep('<=150', sum(sig_genes_df$SampleSize <= 150))
tmp[sig_genes_df$SampleSize > 150&sig_genes_df$SampleSize<=250] = rep('>150 and <=250', sum(sig_genes_df$SampleSize  > 150&sig_genes_df$SampleSize<=250))
tmp[sig_genes_df$SampleSize > 250] = rep('> 250', sum(sig_genes_df$SampleSize > 250))
avg_gain['SS'] = tmp
prop_better['SS'] = tmp
sig_genes_df['SS'] = tmp
avg_gain$Tissue = factor(avg_gain$Tissue, levels=rev(levels(avg_gain$Tissue)))
names(increment) = c("Tissue", "Increment")
ssize.sorted = sort(ssize)
tmp = rep('', 44)
tmp[ssize.sorted <= 150] = rep('<=150', sum(ssize.sorted <= 150))
tmp[ssize.sorted > 150&ssize.sorted<=250] = rep('>150 and <=250', sum(ssize.sorted > 150&ssize.sorted<=250))
tmp[ssize.sorted > 250] = rep('> 250', sum(ssize.sorted > 250))
increment["SS"] = tmp
increment$Tissue = as.factor(increment$Tissue)
increment$Tissue = factor(increment$Tissue,levels = Tissues[order(ssize, decreasing = T)])
sig_genes_df$Tissue = factor(sig_genes_df$Tissue, levels=rev(levels(sig_genes_df$Tissue)))
names(sig_genes_df)
head(sig_genes_df)
sig_genes_df$SS[1]
sig_genes_df$Tissue
unique(sig_genes_df$SS)
sig_genes_df$SS = factor(sig_genes_df$SS, levels=c("<=150",">150 and <=250","> 250"))
sig_genes_df$SS
gg2 <- ggplot(data=sig_genes_df, aes(x = Tissue, y = SigUTMOST))
gg2 <- gg2 + theme_minimal()
gg2 <- gg2 + theme(axis.title.y=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank())
gg2 <- gg2 + geom_point(size=2, aes(colour=SS))
gg2 <- gg2 + theme(legend.position = "None")
gg2 <- gg2 + geom_point(aes(x = Tissue, y = SigMetaxcan), size=2, shape=1)
gg2 <- gg2 + geom_segment(aes(x=Tissue, xend=Tissue, y=SigMetaxcan, yend=SigUTMOST,colour=SS), size=0.3, arrow = arrow(length = unit(0.3, "cm")))
gg2 <- gg2 + scale_color_viridis(option="inferno", discrete=TRUE, begin=0.3, end=0.9)
gg2 <- gg2 + labs(x=NULL, y=NULL, title="Number of heritable genes (FDR<0.05)")
gg2 <- gg2 + coord_flip()
gg2 <- gg2 + scale_y_continuous(expand=c(0,0),limits=c(1900,10700))
gg2 <- gg2 + geom_hline(yintercept=0, colour='darkgrey', size=0.7)
gg2 <- gg2 + theme(panel.grid.major.y=element_blank())
gg2 <- gg2 + theme(panel.grid.minor=element_blank())
gg2 <- gg2 + theme(legend.position = "right")
gg2 <- gg2 + guides(colour=guide_legend(title="Sample Size"))
gg2
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
legend <- g_legend(gg2)
pdf("/Users/huyiming/Desktop/move/MultiGExpr/plotting/accuracyIncrease/legend.pdf", height = 5, width = 5)
grid.draw(legend)
dev.off()
library(ggplot2)
library(ggalt)
library(scales)
library(viridis)
library(gridExtra)
library(grid)
load("/Users/huyiming/Desktop/move/MultiGExpr/plotting/rsq_sig_size.RData")
tvss = aggregate(SampleSize ~ Tissue, rsq_plot2, mean)
tvss["p_value"] = test_p
tvss["if_sig"] = ifelse(test_p<0.05/44,'red','black')
tvss_sorted = tvss[order(tvss$SampleSize),]
tvss_sorted$Tissue = as.character(tvss_sorted$Tissue)
rsq_plot2$Tissue = as.factor(rsq_plot2$Tissue)
rsq_plot2$Tissue = factor(rsq_plot2$Tissue,levels = tvss_sorted$Tissue)
avg_gain = aggregate(Rsq_diff ~ Tissue, rsq_plot2, median)
prop_better = aggregate(Rsq_diff ~ Tissue, rsq_plot2, function(x){sum(x>=0)/length(x)})
sig_genes_df$Tissue = as.factor(sig_genes_df$Tissue)
sig_genes_df$Tissue = factor(sig_genes_df$Tissue,levels = tvss_sorted$Tissue)
sig_genes_df = sig_genes_df[order(sig_genes_df$SampleSize),]
cbind(sig_genes_df$Tissue,unique(avg_gain$Tissue))
tmp = rep('', 44)
tmp[sig_genes_df$SampleSize <= 150] = rep('<=150', sum(sig_genes_df$SampleSize <= 150))
tmp[sig_genes_df$SampleSize > 150&sig_genes_df$SampleSize<=250] = rep('>150 and <=250', sum(sig_genes_df$SampleSize  > 150&sig_genes_df$SampleSize<=250))
tmp[sig_genes_df$SampleSize > 250] = rep('> 250', sum(sig_genes_df$SampleSize > 250))
avg_gain['SS'] = tmp
prop_better['SS'] = tmp
sig_genes_df['SS'] = tmp
avg_gain$Tissue = factor(avg_gain$Tissue, levels=rev(levels(avg_gain$Tissue)))
sig_genes_df$Tissue = factor(sig_genes_df$Tissue, levels=rev(levels(sig_genes_df$Tissue)))
sig_genes_df$SS = factor(sig_genes_df$SS, levels=c("<=150",">150 and <=250","> 250"))
gg2 <- ggplot(data=sig_genes_df, aes(x = Tissue, y = SigUTMOST))
gg2 <- gg2 + theme_minimal()
gg2 <- gg2 + theme(axis.title.y=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank())
gg2 <- gg2 + geom_point(size=2, aes(colour=SS))
gg2 <- gg2 + theme(legend.position = "None")
gg2 <- gg2 + geom_point(aes(x = Tissue, y = SigMetaxcan), size=2, shape=1)
gg2 <- gg2 + geom_segment(aes(x=Tissue, xend=Tissue, y=SigMetaxcan, yend=SigUTMOST,colour=SS), size=0.3, arrow = arrow(length = unit(0.3, "cm")))
gg2 <- gg2 + scale_color_viridis(option="inferno", discrete=TRUE, begin=0.3, end=0.9)
gg2 <- gg2 + labs(x=NULL, y=NULL, title="Number of heritable genes (FDR<0.05)")
gg2 <- gg2 + coord_flip()
gg2 <- gg2 + scale_y_continuous(expand=c(0,0),limits=c(1900,10700))
gg2 <- gg2 + geom_hline(yintercept=0, colour='darkgrey', size=0.7)
gg2 <- gg2 + theme(panel.grid.major.y=element_blank())
gg2 <- gg2 + theme(panel.grid.minor=element_blank())
gg2 <- gg2 + theme(legend.position = "right")
gg2 <- gg2 + guides(colour=guide_legend(title="Sample Size"))
gg2
sig_genes_df$SS
sig_genes_df$SS = tmp
sig_genes_df$SS
gg2 <- ggplot(data=sig_genes_df, aes(x = Tissue, y = SigUTMOST))
gg2 <- gg2 + theme_minimal()
gg2 <- gg2 + theme(axis.title.y=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank())
gg2 <- gg2 + geom_point(size=2, aes(colour=SS))
gg2 <- gg2 + theme(legend.position = "None")
gg2 <- gg2 + geom_point(aes(x = Tissue, y = SigMetaxcan), size=2, shape=1)
gg2 <- gg2 + geom_segment(aes(x=Tissue, xend=Tissue, y=SigMetaxcan, yend=SigUTMOST,colour=SS), size=0.3, arrow = arrow(length = unit(0.3, "cm")))
gg2 <- gg2 + scale_color_viridis(option="inferno", discrete=TRUE, begin=0.3, end=0.9)
gg2 <- gg2 + labs(x=NULL, y=NULL, title="Number of heritable genes (FDR<0.05)")
gg2 <- gg2 + coord_flip()
gg2 <- gg2 + scale_y_continuous(expand=c(0,0),limits=c(1900,10700))
gg2 <- gg2 + geom_hline(yintercept=0, colour='darkgrey', size=0.7)
gg2 <- gg2 + theme(panel.grid.major.y=element_blank())
gg2 <- gg2 + theme(panel.grid.minor=element_blank())
gg2 <- gg2 + theme(legend.position = "right")
gg2 <- gg2 + guides(colour=guide_legend(title="Sample Size"))
gg2
library(ggplot2)
library(ggalt)
library(scales)
library(viridis)
library(gridExtra)
library(grid)
load("/Users/huyiming/Desktop/move/MultiGExpr/plotting/rsq_sig_size.RData")
tvss = aggregate(SampleSize ~ Tissue, rsq_plot2, mean)
tvss["p_value"] = test_p
tvss["if_sig"] = ifelse(test_p<0.05/44,'red','black')
tvss_sorted = tvss[order(tvss$SampleSize),]
tvss_sorted$Tissue = as.character(tvss_sorted$Tissue)
rsq_plot2$Tissue = as.factor(rsq_plot2$Tissue)
rsq_plot2$Tissue = factor(rsq_plot2$Tissue,levels = tvss_sorted$Tissue)
avg_gain = aggregate(Rsq_diff ~ Tissue, rsq_plot2, median)
prop_better = aggregate(Rsq_diff ~ Tissue, rsq_plot2, function(x){sum(x>=0)/length(x)})
sig_genes_df$Tissue = as.factor(sig_genes_df$Tissue)
sig_genes_df$Tissue = factor(sig_genes_df$Tissue,levels = tvss_sorted$Tissue)
sig_genes_df = sig_genes_df[order(sig_genes_df$SampleSize),]
cbind(sig_genes_df$Tissue,unique(avg_gain$Tissue))
tmp = rep('', 44)
tmp[sig_genes_df$SampleSize <= 150] = rep('<=150', sum(sig_genes_df$SampleSize <= 150))
tmp[sig_genes_df$SampleSize > 150&sig_genes_df$SampleSize<=250] = rep('>150 and <=250', sum(sig_genes_df$SampleSize  > 150&sig_genes_df$SampleSize<=250))
tmp[sig_genes_df$SampleSize > 250] = rep('> 250', sum(sig_genes_df$SampleSize > 250))
avg_gain['SS'] = factor(tmp, levels=c("<=150",">150 and <=250","> 250"))
prop_better['SS'] = factor(tmp, levels=c("<=150",">150 and <=250","> 250"))
sig_genes_df['SS'] = factor(tmp, levels=c("<=150",">150 and <=250","> 250"))
avg_gain$Tissue = factor(avg_gain$Tissue, levels=rev(levels(avg_gain$Tissue)))
gg0 <- ggplot(avg_gain, aes(Tissue, Rsq_diff, color = SS))
gg0 <- gg0 + theme_minimal()
gg0 <- gg0 + geom_lollipop()
gg0 <- gg0 + coord_flip()
gg0 <- gg0 + scale_y_continuous(expand=c(0,0), limits=c(0,0.029))
gg0 <- gg0 + geom_hline(yintercept=0, colour='darkgrey', size=0.7)
gg0 <- gg0 + scale_color_viridis(option="inferno", discrete=TRUE, begin=0.3, end=0.9)
gg0 <- gg0 + labs(x=NULL, y=NULL, title=expression("Average gain of R"^2*" by UTMOST"))
gg0 <- gg0 + theme(panel.grid.major.y=element_blank())
gg0 <- gg0 + theme(panel.grid.minor=element_blank())
gg0 <- gg0 + theme(legend.position = "None")
gg0 <- gg0 + theme(axis.text=element_text(size=10))
gg0
gg0 <- ggplot(avg_gain, aes(Tissue, Rsq_diff, color = SS))
gg0 <- gg0 + theme_minimal()
gg0 <- gg0 + geom_lollipop()
gg0 <- gg0 + coord_flip()
gg0 <- gg0 + scale_y_continuous(expand=c(0,0), limits=c(0,0.029))
gg0 <- gg0 + geom_hline(yintercept=0, colour='darkgrey', size=0.7)
gg0 <- gg0 + theme(axis.title.y=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank())
gg0 <- gg0 + scale_color_viridis(option="inferno", discrete=TRUE, begin=0.3, end=0.9)
gg0 <- gg0 + labs(x=NULL, y=NULL, title=expression("Average gain of R"^2*" by UTMOST"))
gg0 <- gg0 + theme(panel.grid.major.y=element_blank())
gg0 <- gg0 + theme(panel.grid.minor=element_blank())
gg0 <- gg0 + theme(legend.position = "None")
#gg0 <- gg0 + theme(axis.text=element_text(size=16), axis.title=element_text(size=16), plot.title=element_text(size=20))
#gg0 <- gg0 + theme(axis.text.y=element_text(margin=margin(r=10, l=0)))
gg0 <- gg0 + theme(axis.title.y = element_text(margin = margin(t = 0, r = 0, b = 0, l = 0)))
gg0
names(increment) = c("Tissue", "Increment")
ssize.sorted = sort(ssize)
tmp = rep('', 44)
tmp[ssize.sorted <= 150] = rep('<=150', sum(ssize.sorted <= 150))
tmp[ssize.sorted > 150&ssize.sorted<=250] = rep('>150 and <=250', sum(ssize.sorted > 150&ssize.sorted<=250))
tmp[ssize.sorted > 250] = rep('> 250', sum(ssize.sorted > 250))
increment["SS"] = tmp
increment$Tissue = as.factor(increment$Tissue)
increment$Tissue = factor(increment$Tissue,levels = Tissues[order(ssize, decreasing = T)])
names(increment) = c("Tissue", "Increment")
ssize.sorted = sort(ssize)
tmp = rep('', 44)
tmp[ssize.sorted <= 150] = rep('<=150', sum(ssize.sorted <= 150))
tmp[ssize.sorted > 150&ssize.sorted<=250] = rep('>150 and <=250', sum(ssize.sorted > 150&ssize.sorted<=250))
tmp[ssize.sorted > 250] = rep('> 250', sum(ssize.sorted > 250))
increment["SS"] = factor(tmp, levels=c("<=150",">150 and <=250","> 250"))
increment$Tissue = as.factor(increment$Tissue)
increment$Tissue = factor(increment$Tissue,levels = Tissues[order(ssize, decreasing = T)])
names(increment) = c("Tissue", "Increment")
load("/Users/huyiming/Desktop/move/MultiGExpr/plotting/cv_scatter_plots.RData")
avg_ac_increase = rep(0,44)
med_ac_increase = rep(0,44)
for(t in 1:44){
names(rsq_plot1[[hpdf[t,1]]]) = c('mt1','x','mt2','y')
avg_ac_increase[t] = mean((rsq_plot1[[hpdf[t,1]]]$y-rsq_plot1[[hpdf[t,1]]]$x)/rsq_plot1[[hpdf[t,1]]]$x)
med_ac_increase[t] = median((rsq_plot1[[hpdf[t,1]]]$y-rsq_plot1[[hpdf[t,1]]]$x)/rsq_plot1[[hpdf[t,1]]]$x)
}
hpdf = data.frame(1:44, ssize, Tissues)
hpdf = hpdf[order(ssize, decreasing = F),]
avg_ac_increase = rep(0,44)
med_ac_increase = rep(0,44)
for(t in 1:44){
names(rsq_plot1[[hpdf[t,1]]]) = c('mt1','x','mt2','y')
avg_ac_increase[t] = mean((rsq_plot1[[hpdf[t,1]]]$y-rsq_plot1[[hpdf[t,1]]]$x)/rsq_plot1[[hpdf[t,1]]]$x)
med_ac_increase[t] = median((rsq_plot1[[hpdf[t,1]]]$y-rsq_plot1[[hpdf[t,1]]]$x)/rsq_plot1[[hpdf[t,1]]]$x)
}
increment = data.frame(Tissues[order(ssize, decreasing = F)], avg_ac_increase)
ssize.sorted = sort(ssize)
names(increment) = c("Tissue", "Increment")
ssize.sorted = sort(ssize)
tmp = rep('', 44)
tmp[ssize.sorted <= 150] = rep('<=150', sum(ssize.sorted <= 150))
tmp[ssize.sorted > 150&ssize.sorted<=250] = rep('>150 and <=250', sum(ssize.sorted > 150&ssize.sorted<=250))
tmp[ssize.sorted > 250] = rep('> 250', sum(ssize.sorted > 250))
increment["SS"] = factor(tmp, levels=c("<=150",">150 and <=250","> 250"))
increment$Tissue = as.factor(increment$Tissue)
increment$Tissue = factor(increment$Tissue,levels = Tissues[order(ssize, decreasing = T)])
gg1 <- ggplot(increment)
gg1 <- gg1 + theme_minimal()
gg1 <- gg1 + geom_bar(aes(x=Tissue, y=Increment, fill = SS),stat="identity")
gg1 <- gg1 + theme(axis.title.y=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank())
gg1 <- gg1 + scale_y_continuous(labels=percent)
gg1 <- gg1 + coord_flip()
gg1 <- gg1 + scale_y_continuous(expand=c(0,0), limits=c(0,0.62))
gg1 <- gg1 + geom_hline(yintercept=0, colour='darkgrey', size=0.7)
gg1 <- gg1 + scale_fill_viridis(option="inferno", discrete=TRUE, begin=0.3, end=0.9)
gg1 <- gg1 + labs(x=NULL, y=NULL, title=expression("Average percentage of increment in R"^2))
gg1 <- gg1 + theme(panel.grid.major.y=element_blank())
gg1 <- gg1 + theme(panel.grid.minor=element_blank())
gg1 <- gg1 + theme(legend.position = "None")
gg1
sig_genes_df$Tissue = factor(sig_genes_df$Tissue, levels=rev(levels(sig_genes_df$Tissue)))
gg2 <- ggplot(data=sig_genes_df, aes(x = Tissue, y = SigUTMOST))
gg2 <- gg2 + theme_minimal()
gg2 <- gg2 + theme(axis.title.y=element_blank(),axis.text.y=element_blank(),axis.ticks.y=element_blank())
gg2 <- gg2 + geom_point(size=2, aes(colour=SS))
gg2 <- gg2 + theme(legend.position = "None")
gg2 <- gg2 + geom_point(aes(x = Tissue, y = SigMetaxcan), size=2, shape=1)
gg2 <- gg2 + geom_segment(aes(x=Tissue, xend=Tissue, y=SigMetaxcan, yend=SigUTMOST,colour=SS), size=0.3, arrow = arrow(length = unit(0.3, "cm")))
gg2 <- gg2 + scale_color_viridis(option="inferno", discrete=TRUE, begin=0.3, end=0.9)
gg2 <- gg2 + labs(x=NULL, y=NULL, title="Number of heritable genes (FDR<0.05)")
gg2 <- gg2 + coord_flip()
gg2 <- gg2 + scale_y_continuous(expand=c(0,0),limits=c(1900,10700))
gg2 <- gg2 + geom_hline(yintercept=0, colour='darkgrey', size=0.7)
gg2 <- gg2 + theme(panel.grid.major.y=element_blank())
gg2 <- gg2 + theme(panel.grid.minor=element_blank())
gg2 <- gg2 + theme(legend.position = "right")
gg2 <- gg2 + guides(colour=guide_legend(title="Sample Size"))
gg2
g_legend<-function(a.gplot){
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)}
legend <- g_legend(gg2)
pdf("/Users/huyiming/Desktop/move/MultiGExpr/plotting/accuracyIncrease/legend.pdf", height = 5, width = 5)
grid.draw(legend)
dev.off()
gg2 <- gg2 + theme(legend.position = "None")
pdf("/Users/huyiming/Desktop/move/MultiGExpr/plotting/accuracyIncrease/plots_new.pdf", height = 5, width = 12)
grid.arrange(gg0,gg1,gg2,ncol=3,nrow=1)
dev.off()
100229017 - 500000
100229017 + 500000
format(c(1,3,4,2), scientific=T, digits=3)
z1=0.0158/0.0038
z2=0.1291/0.1214
z3=0.0173/0.0036
1-pnorm(z1)
1-pnorm(z2)
1-pnorm(z3)
info = read.table('info.txt', header=T)
options(stringsAsFactors = F)
setwd('/Users/huyiming/Documents/workspace/PERMIT/example')
info = read.table('info.txt', header=T)
write.table(info, 'info.txt', sep='\t', quote=F,col.names = T,row.names = F)
head(info)
